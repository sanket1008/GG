/*
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Modifications from original source file: Removed the need for intent, and option to view in VR.
 * Converted file to Kotlin.
 */

package com.unc.gearupvr.components.video_player

import android.app.ActivityManager
import android.content.Context
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.SurfaceTexture
import android.graphics.SurfaceTexture.OnFrameAvailableListener
import android.media.MediaPlayer
import android.util.AttributeSet
import android.view.*
import android.view.View.OnClickListener
import android.widget.ImageButton
import android.widget.LinearLayout
import android.widget.SeekBar
import android.widget.SeekBar.OnSeekBarChangeListener
import android.widget.TextView
import androidx.annotation.AnyThread
import androidx.annotation.MainThread
import androidx.annotation.Nullable
import com.unc.gearupvr.R
import com.unc.gearupvr.components.video_player.rendering.CanvasQuad

/*
* Copyright 2017 Google Inc. All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
 * Contains a UI that can be part of a standard 2D Android Activity or a VR Activity.
 *
 *
 * For 2D Activities, this View behaves like any other Android View. It receives events from the
 * media player, updates the UI, and forwards user input to the appropriate component. In VR
 * Activities, this View uses standard Android APIs to render its child Views to a texture that is
 * displayed in VR. It also receives events from the Daydream Controller and forwards them to its
 * child views.
 */
class VideoUiView
/** Creates this View using standard XML inflation.  */(context: Context?, attrs: AttributeSet?) :
    LinearLayout(context, attrs) {
    // These UI elements are only useful when the app is displaying a video.
    private var seekBar: SeekBar? = null
    private var statusText: TextView? = null
    private val uiUpdater: UiUpdater =
        UiUpdater()
    // Since MediaPlayer lacks synchronization for internal events, it should only be accessed on the
// main thread.
    @Nullable
    private var mediaPlayer: MediaPlayer? = null
    // The canvasQuad is only not null when this View is in a VR Activity. It provides the backing
// canvas that standard Android child Views render to.
    @Nullable
    private var canvasQuad: CanvasQuad? = null

    /**
     * Binds the media player in order to update video position if the Activity is showing a video.
     * This is also used to clear the bound mediaPlayer when the Activity exits to avoid trying to
     * access the mediaPlayer while it is in an invalid state.
     */
    @MainThread
    fun setMediaPlayer(mediaPlayer: MediaPlayer?) {
        this.mediaPlayer = mediaPlayer

        if (seekBar != null)
            seekBar?.max = this.mediaPlayer?.duration ?: 0

        this.mediaPlayer?.setOnBufferingUpdateListener { mp, percent ->
            val ratio = percent / 100.0
            val bufferingLevel = (mp?.duration ?: 0) * ratio
            if (seekBar != null) {
                if ((seekBar?.max ?: 0) <= 0)
                    seekBar?.max = mp?.duration ?: 0
                seekBar?.secondaryProgress = bufferingLevel.toInt()
            }
        }

        postInvalidate()
    }

    /** Ignores 2D touch events when this View is used in a VR Activity.  */
    override fun onInterceptTouchEvent(event: MotionEvent): Boolean {
        if (canvasQuad == null) { // Not in VR mode so use standard behavior.
            return super.onInterceptTouchEvent(event)
        }
        if (ActivityManager.isRunningInTestHarness()) { // If your app uses UI Automator tests, it's useful to have this touch system handle touch
// events created during tests. This allows you to create UI tests that work while the app
// is in VR.
            return false
        }
        // We are in VR mode. Synthetic events generated by SceneRenderer are marked as SOURCE_GAMEPAD
// events. For this class of events, we will let the Android Touch system handle the event so we
// return false. Other classes of events were generated by the user accidentally touching the
// screen where this hidden view is attached.
        return event.source != InputDevice.SOURCE_GAMEPAD
    }

    /** Handles standard Android touch events or synthetic VR events.  */
    override fun onTouchEvent(event: MotionEvent): Boolean {
        return if (canvasQuad != null) { // In VR mode so process controller events & ignore touchscreen events.
            if (event.source != InputDevice.SOURCE_GAMEPAD) { // Tell the system that we handled the event. This prevents children from seeing the event.
                true
            } else { // Have the system send the event to child Views and they will handle clicks.
                super.onTouchEvent(event)
            }
        } else { // Not in VR mode so use standard behavior.
            super.onTouchEvent(event)
        }
    }

    /** Installs the View's event handlers.  */
    public override fun onFinishInflate() {
        super.onFinishInflate()
        val playPauseToggle =
            findViewById<View>(R.id.play_pause_toggle) as ImageButton
        playPauseToggle.setOnClickListener(
            OnClickListener {
                if (mediaPlayer == null) {
                    return@OnClickListener
                }
                if (mediaPlayer?.isPlaying == true) {
                    mediaPlayer?.pause()
                    playPauseToggle.setBackgroundResource(R.drawable.play_button)
                    playPauseToggle.contentDescription = resources.getString(R.string.play_label)
                } else {
                    mediaPlayer?.start()
                    playPauseToggle.setBackgroundResource(R.drawable.pause_button)
                    playPauseToggle.contentDescription = resources.getString(R.string.pause_label)
                }
            })
        seekBar = findViewById<View>(R.id.seek_bar) as SeekBar
        seekBar?.setOnSeekBarChangeListener(SeekBarListener())
        statusText = findViewById<View>(R.id.status_text) as TextView
    }

    /** Sets the OnClickListener used to switch Activities.  */
    @MainThread
    fun setVrIconClickListener(listener: OnClickListener?) {
        val vrIcon = findViewById<View>(R.id.enter_exit_vr) as ImageButton
        vrIcon.setOnClickListener(listener)
    }

    /**
     * Renders this View and its children to either Android View hierarchy's Canvas or to the VR
     * scene's CanvasQuad.
     *
     * @param androidUiCanvas used in 2D mode to render children to the screen
     */
    public override fun dispatchDraw(androidUiCanvas: Canvas) {
        if (canvasQuad == null) { // Handle non-VR rendering.
            super.dispatchDraw(androidUiCanvas)
            return
        }
        // Handle VR rendering.
        val glCanvas: Canvas? = canvasQuad?.lockCanvas()
        if (glCanvas == null) { // This happens if Android tries to draw this View before GL initialization completes. We need
// to retry until the draw call happens after GL invalidation.
            postInvalidate()
            return
        }
        // Clear the canvas first.
        glCanvas.drawColor(Color.BLACK)
        // Have Android render the child views.
        super.dispatchDraw(glCanvas)
        // Commit the changes.
        canvasQuad?.unlockCanvasAndPost(glCanvas)
    }

    /**
     * Gets the listener used to update the seek bar's position on each new video frame.
     *
     * @return a listener that can be passed to
     * [SurfaceTexture.setOnFrameAvailableListener]
     */
    val frameListener: OnFrameAvailableListener
        get() = uiUpdater

    /** Updates the seek bar and status text.  */
    private inner class UiUpdater :
        OnFrameAvailableListener {
        private var videoDurationMs = 0
        // onFrameAvailable is called on an arbitrary thread, but we can only access mediaPlayer on the
// main thread.
        private val uiThreadUpdater = Runnable {
            if (mediaPlayer == null) {
                return@Runnable
            }
            if (videoDurationMs == 0) {
                videoDurationMs = mediaPlayer?.duration ?: 0
                seekBar?.max = videoDurationMs
            }
            val positionMs = (mediaPlayer?.currentPosition ?: 0)
            seekBar?.progress = positionMs
            val status = StringBuilder()
//            status.append(String.format("%.2f", positionMs / 1000f))
            status.append(getTimeString(positionMs))
            status.append(" / ")
            status.append(getTimeString(videoDurationMs))
//            status.append(videoDurationMs / 1000)
            statusText?.text = status.toString()
            if (canvasQuad != null) { // When in VR, we will need to manually invalidate this View.
                invalidate()
            }
        }

        private fun getTimeString(millis: Int): String? {
            val buf = StringBuffer()
            val hours = (millis / (1000 * 60 * 60)).toInt()
            val minutes = (millis % (1000 * 60 * 60) / (1000 * 60)).toInt()
            val seconds = (millis % (1000 * 60 * 60) % (1000 * 60) / 1000).toInt()
            if (hours != 0) {
                buf.append(String.format("%02d", hours))
                    .append(":")
            }
            buf
                .append(String.format("%02d", minutes))
                .append(":")
                .append(String.format("%02d", seconds))
            return buf.toString()
        }

        @AnyThread
        override fun onFrameAvailable(surfaceTexture: SurfaceTexture) {
            post(uiThreadUpdater)
        }
    }

    /** Handles the user seeking to a new position in the video.  */
    private inner class SeekBarListener : OnSeekBarChangeListener {
        override fun onProgressChanged(
            seekBar: SeekBar,
            progress: Int,
            fromUser: Boolean
        ) {
            if (fromUser && mediaPlayer != null) {
                mediaPlayer?.seekTo(progress)
            } // else this was from the ActivityEventHandler.onNewFrame()'s seekBar.setProgress update.
        }

        override fun onStartTrackingTouch(seekBar: SeekBar) {}
        override fun onStopTrackingTouch(seekBar: SeekBar) {}
    }

    companion object {
        /**
         * Creates this view for use in a VR scene.
         *
         * @param context the context used to set this View's theme
         * @param parent a parent view this view will be attached to such as the Activity's root View
         * @param quad the floating quad in the VR scene that will render this View
         */
        @MainThread
        fun createForOpenGl(
            context: Context?,
            parent: ViewGroup,
            quad: CanvasQuad?
        ): VideoUiView { // If a custom theme isn't specified, the Context's theme is used. For VR Activities, this is
// the old Android default theme rather than a modern theme. Override this with a custom theme.
            val theme: Context =
                ContextThemeWrapper(context, R.style.VrTheme)
            val view =
                View.inflate(theme, R.layout.video_ui, null) as VideoUiView
            view.canvasQuad = quad
            view.layoutParams = CanvasQuad.layoutParams
            view.visibility = View.VISIBLE
            parent.addView(view, 0)
            view.findViewById<View>(R.id.enter_exit_vr).contentDescription =
                view.resources.getString(R.string.exit_vr_label)
            return view
        }
    }
}